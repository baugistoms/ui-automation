pipeline {
    agent any
    stages { 
        stage('build') {
            steps {
                echo "Building node application"
            }
        }
        stage('set-up-selenium-env') {
            steps {
                script {
                    setUpSeleniumProcesses()
                }
            }
        }
        stage('deploy-stage') {
            steps {
                script {
                    try {
                        deploy("stage")
                    } catch (error) {
                        sendNotification("stage_deployment", "failure")
                        sh "exit 1"   
                    } finally {
                        sendNotification("stage_deployment", "success")
                    }
                }
            }
        }
        stage('test-stage') {
            parallel {
                stage('test-stage-chrome') {
                    steps {
                        script {
                            try {
                                sh "docker run -d -t --network=test-automation-setup-intermediate --name mvn-tests-stage-chrome baugist/mvn_tests:latest"
                                sh "docker exec mvn-tests-stage-chrome mvn clean test -Dbrowser=chrome -DgridURL=selenium-hub-tests-intermediate:4444"
                                sh "docker exec mvn-tests-stage-chrome mvn io.qameta.allure:allure-maven:report"
                                sh "docker exec mvn-tests-stage-chrome rm -rf test-output/*"
                                sh "docker exec mvn-tests-stage-chrome cp -R target/site/allure-maven-plugin test-output"
                            } catch (error) {
                                sendNotification("stage_testing_chrome", "failure")
                                sh "exit 1"
                            } finally {
                                sendNotification("stage_testing_chrome", "success")
                                sh "docker cp mvn-tests-stage-chrome:/docker/test-output/allure-maven-plugin/index.html report_stage_chrome.html"
                                sh "docker rm -f mvn-tests-stage-chrome"
                                publishHTML(
                                    [
                                        allowMissing: false, 
                                        alwaysLinkToLastBuild: false,
                                        keepAll: false, 
                                        reportDir: '', 
                                        reportFiles: "report_stage_chrome.html", 
                                        reportName: "Test Report Stage", 
                                        reportTitles: ''
                                    ]
                                )
                            }
                        }
                    }
                }
                stage('test-stage-firefox') {
                    steps {
                        script {
                            try {
                                sh "docker run -d -t --name mvn-tests-stage-firefox --network=test-automation-setup-intermediate baugist/mvn_tests mvn clean test -Dbrowser=firefox -DgridURL=selenium-hub-tests-intermediate:4444"
                            } catch (error) {
                                sendNotification("stage_testing_firefox", "failure")
                                sh "exit 1"
                            } finally {
                                sendNotification("stage_testing_firefox", "success")
                                sh "docker rm mvn-tests-stage-firefox"
                            }
                        }
                    }
                }
            }
        }
        stage('deploy-prod') {
            steps {
                script {
                    try {
                        deploy("prod")
                        sendNotification("prod_deployment", "success")
                    } catch (error) {
                        sendNotification("prod_deployment", "failure")
                        error "Failed with error ${error}, exiting now..."     
                    }
                }
            }
        }
        stage('test-prod') {
            parallel {
                stage('test-prod-chrome') {
                    steps {
                        script {
                            try {
                                sh "docker run --network=test-automation-setup-intermediate baugist/mvn_tests mvn clean test -Dbrowser=chrome -DgridURL=selenium-hub-tests-intermediate:4444"
                            } catch (error) {
                                sendNotification("prod_testing_chrome", "failure")
                                sh "exit 1"
                            } finally {
                                sendNotification("prod_testing_chrome", "success")
                            }
                        }
                    }
                }
                stage('test-prod-firefox') {
                    steps {
                        script {
                            try {
                                sh "docker run --network=test-automation-setup-intermediate baugist/mvn_tests mvn clean test -Dbrowser=firefox -DgridURL=selenium-hub-tests-intermediate:4444"
                            } catch (error) {
                                sendNotification("prod_testing_firefox", "failure")
                                sh "exit 1"
                            } finally {
                                sendNotification("prod_testing_firefox", "success")
                            }
                        }
                    }
                }
            }
        }
        stage('stop-selenium-env') {
            steps {
                script {
                    stopSeleniumProcesses()
                }
            }
        }
    }
}

def sendNotification(String environment, String status) {
    if (status == "success") {
        sh "bash send_notification.sh ${environment} 0"
    } else {
        sh "bash send_notification.sh ${environment} 1"
    }
}
def deploy(String environment) {
    echo "Deployment to ${environment} triggered.."
}

def test(String environment) {
    echo "Running tests on ${environment}.."
    sh "docker pull baugist/mvn_tests:latest"
}

def setUpSeleniumProcesses () {
    sh "docker run -d -p 4442-4444:4442-4444 --net test-automation-setup-intermediate --rm --name selenium-hub-tests-intermediate selenium/hub:latest"
    sh "docker run -d --rm --name chrome-node-tests --net test-automation-setup-intermediate -e SE_EVENT_BUS_HOST=selenium-hub-tests-intermediate -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-chrome:latest"
    sh "docker run -d --rm --name firefox-node-tests --net test-automation-setup-intermediate -e SE_EVENT_BUS_HOST=selenium-hub-tests-intermediate -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-firefox:latest"
}

def stopSeleniumProcesses() {
    sh "docker rm -f selenium-hub-tests-intermediate"
    sh "docker rm -f chrome-node-tests"
    sh "docker rm -f firefox-node-tests"
}