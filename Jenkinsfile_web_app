pipeline {
    agent any
    stages { 
        stage('build') {
            steps {
                echo "Building node application"
            }
        }
        stage('deploy-stage') {
            steps {
                script {
                    try {
                        deploy("stage")
                        sendNotification("stage_deployment", "success")
                    } catch (error) {
                        sendNotification("stage_deployment", "failure")
                        error "Failed with error ${error}, exiting now..."     
                    }
                }
            }
        }
        stage('test-stage') {
            steps {
                script {
                    try {
                        test("stage")
                        sendNotification("stage_testing", "success")
                    } catch (error) {
                        sendNotification("stage_testing", "failure")
                        error "Failed with error ${error}, exiting now..."     
                    }
                }
            }
        }
        stage('deploy-prod') {
            steps {
                script {
                    try {
                        deploy("prod")
                        sendNotification("prod_deployment", "success")
                    } catch (error) {
                        sendNotification("prod_deployment", "failure")
                        error "Failed with error ${error}, exiting now..."     
                    }
                }
            }
        }
        stage('test-prod') {
            steps {
                script {
                    try {
                        test("prod")
                        sendNotification("prod_testing", "success")
                    } catch (error) {
                        sendNotification("prod_testing", "failure")
                        error "Failed with error ${error}, exiting now..."     
                    }
                }
            }
        }
    }
}

def sendNotification(String environment, String status) {
    if (status == "success") {
        sh "bash send_notification.sh ${environment} 0"
    } else {
        sh "bash send_notification.sh ${environment} 1"
    }
}
def deploy(String environment) {
    echo "Deployment to ${environment} triggered.."
}

def test(String environment) {
    echo "Running tests on ${environment}.."
    sh "docker pull baugist/mvn_tests:latest"
}