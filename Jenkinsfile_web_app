pipeline {
    agent any
    stages { 
        stage('build') {
            steps {
                echo "Building node application"
            }
        }
        stage('deploy-stage') {
            steps {
                script {
                    try {
                        deploy("stage")
                    } catch (error) {
                        sendNotification("stage_deployment", "failure")
                        sh "exit 1"   
                    } finally {
                        sendNotification("stage_deployment", "success")
                    }
                }
            }
        }
        stage('test-stage') {
            steps {
                try {
                    script {
                        test("stage")
                    }
                    parallel {
                        stage('test-chrome') {
                            steps {
                                script {
                                    try {
                                        sh "docker run --network=test-automation-setup-intermediate baugist/mvn_tests mvn clean test -Dbrowser=chrome -DgridURL=selenium-hub-tests-intermediate:4444"
                                    } catch (error) {
                                        sendNotification("stage_testing", "failure")
                                        sh "exit 1"
                                    }
                                }
                            }
                        }
                        stage('test-firefox') {
                            steps {
                                script {
                                    try {
                                        sh "docker run --network=test-automation-setup-intermediate baugist/mvn_tests mvn clean test -Dbrowser=firefox -DgridURL=selenium-hub-tests-intermediate:4444"
                                    } catch (error) {
                                        sendNotification("stage_testing", "failure")
                                        sh "exit 1"
                                    }
                                }
                            }
                        }
                    }
                }
                finally {
                sendNotification("stage_testing", "success")
                sh "docker rm -f selenium-hub-tests-intermediate"
                sh "docker rm -f chrome-node-tests"
                sh "docker rm -f firefox-node-tests"
            }
        }
        stage('deploy-prod') {
            steps {
                script {
                    try {
                        deploy("prod")
                        sendNotification("prod_deployment", "success")
                    } catch (error) {
                        sendNotification("prod_deployment", "failure")
                        error "Failed with error ${error}, exiting now..."     
                    }
                }
            }
        }
        stage('test-prod') {
            steps {
                script {
                    try {
                        test("prod")
                        sendNotification("prod_testing", "success")
                    } catch (error) {
                        sendNotification("prod_testing", "failure")
                        error "Failed with error ${error}, exiting now..."     
                    }
                }
            }
        }
    }
}

def sendNotification(String environment, String status) {
    if (status == "success") {
        sh "bash send_notification.sh ${environment} 0"
    } else {
        sh "bash send_notification.sh ${environment} 1"
    }
}
def deploy(String environment) {
    echo "Deployment to ${environment} triggered.."
}

def test(String environment) {
    echo "Running tests on ${environment}.."
    sh "docker pull baugist/mvn_tests:latest"
    sh "docker run -d -p 4442-4444:4442-4444 --net test-automation-setup-intermediate --rm --name selenium-hub-tests-intermediate selenium/hub:latest"
    sh "docker run -d --rm --name chrome-node-tests --net test-automation-setup-intermediate -e SE_EVENT_BUS_HOST=selenium-hub-tests-intermediate -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-chrome:latest"
    sh "docker run -d --rm --name firefox-node-tests --net test-automation-setup-intermediate -e SE_EVENT_BUS_HOST=selenium-hub-tests-intermediate -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-firefox:latest"
}